WEBVTT

1
00:00:01.000 --> 00:00:06.500
In this demo, we'll create some different subsets using Destination Rules

2
00:00:06.500 --> 00:00:12.000
and forward our traffic to those service endpoints grouped together.

3
00:00:12.000 --> 00:00:19.000
Before that, let's have a look at our existing Destination Rules for reviews.

4
00:00:19.000 --> 00:00:24.000
We have three different subsets, and they refer to the labels as

5
00:00:24.000 --> 00:00:29.000
Version V1, Version V2, and Version V3.

6
00:00:31.000 --> 00:00:37.000
Here in the Virtual Services, we simply use these subsets to route our traffic.

7
00:00:37.000 --> 00:00:43.500
But what if one day, we somehow needed to group different Deployments together

8
00:00:43.500 --> 00:00:50.000
underneath the same service, with a different rule, or label, let's say?

9
00:00:50.000 --> 00:00:55.000
To do that, first, we need to add a new label to our app.

10
00:00:55.000 --> 00:01:00.000
This new label will help us create some different Destination Rules.

11
00:01:00.000 --> 00:01:07.000
Here, I copied the reviews.yml from the samples directory.

12
00:01:07.000 --> 00:01:12.000
First, I'll add test-beta-label to the review service.

13
00:01:12.000 --> 00:01:26.000
Then, I'll skip my first deployment because I don't want the Version V1 in this new grouping.

14
00:01:26.000 --> 00:01:33.000
and add the same label to Version V2 and Version V3 deployments.

15
00:01:42.000 --> 00:01:57.000
Now, we'll delete and then apply this YAML.

16
00:01:58.000 --> 00:02:12.000
Now, when we go to the Kiali dashboard, our labels can be found in the Workloads page.

17
00:02:12.000 --> 00:02:20.000
Here we have test-beta in Version V2 and Version V3, but not in Version V1.

18
00:02:20.000 --> 00:02:30.000
So, also in the Applications page, you can see our service has the new label already.

19
00:02:30.000 --> 00:02:38.000
Now, let's go to Istio config and create our new subset in the reviews Destination Rule.

20
00:02:38.000 --> 00:02:45.000
Let's keep Version V1 subset and add a new test-beta subset.

21
00:02:45.000 --> 00:02:50.000
This could help us test two different versions of our app.

22
00:02:50.000 --> 00:02:56.000
Like, we can even ask which one they prefer to our customers.

23
00:02:56.000 --> 00:03:02.000
When we go to the Virtual Services, because we just removed our old subsets,

24
00:03:02.000 --> 00:03:07.000
Kiali is warning us with these yellow lines.

25
00:03:07.000 --> 00:03:27.000
Let's only keep V1 and only add our new test-beta subset as a single destination together.

26
00:03:27.000 --> 00:03:32.000
Oh, we also need to tell how to manage traffic between those.

27
00:03:32.000 --> 00:03:41.000
So, let's open our app to only 10% of total traffic.

28
00:03:41.000 --> 00:03:47.000
Obviously, I need to put the name of the subset here, and I got it wrong.

29
00:03:47.000 --> 00:03:50.000
Let's go back to our Destination Rule.

30
00:03:50.000 --> 00:03:58.000
Yes, it needs to be tested.

31
00:03:58.000 --> 00:04:04.000
If we go to our browser, we'll see Reviews V1 most of the time,

32
00:04:04.000 --> 00:04:13.000
and V2 and V3 show up, but rarely.

33
00:04:13.000 --> 00:04:18.000
We can create some traffic to see how our app is doing.

34
00:04:18.000 --> 00:04:24.000
In Istio config, we can go to Reviews and see the traffic distribution.

35
00:04:25.000 --> 00:04:34.000
V2 and V3 almost have the same weight, but V1 is almost 9 times their total.

36
00:04:34.000 --> 00:04:45.000
Now, let's change this weight distribution altogether, and see how our app is doing.

37
00:04:45.000 --> 00:04:54.000
Here, V2 and V3 are taking over the world right now.

38
00:04:54.000 --> 00:05:02.000
We then can also create a traffic policy for test subset, and it can be a random load balancer.

39
00:05:02.000 --> 00:05:12.000
This way, we can distribute traffic randomly in our subset.

40
00:05:12.000 --> 00:05:19.000
As you can see, Reviews V2 and V3 started to change randomly.

41
00:05:19.000 --> 00:05:28.000
Now, we can all delete these subsets and try a different traffic policy.

42
00:05:28.000 --> 00:05:33.000
It will make all our Review apps work in a round-robin mode.

43
00:05:33.000 --> 00:05:37.000
We also need to remove the subsets from our Virtual Services.

44
00:05:37.000 --> 00:05:44.000
In the browser, you can follow that the Review service is changing in a round-robin mode.

45
00:05:44.000 --> 00:05:53.000
Destination Rules, in conjunction with Virtual Services, help us configure complex traffic management policies.
