WEBVTT

1
00:00:01.000 --> 00:00:05.000
Let us now have a look at Destination Rules.

2
00:00:06.000 --> 00:00:13.000
Destination Rules apply routing policies after the traffic is routed to a specific service.

3
00:00:14.000 --> 00:00:16.000
Let's see what this actually means.

4
00:00:18.000 --> 00:00:26.000
Earlier, we talked about Virtual Services and how the review service can be configured with a Virtual Service

5
00:00:26.000 --> 00:00:30.000
to distribute a percentage of traffic to different versions.

6
00:00:31.000 --> 00:00:41.000
We know that 99% of traffic is sent to the subset V1 and 1% is sent to subset V2.

7
00:00:42.000 --> 00:00:46.000
So where and how are these subsets defined?

8
00:00:48.000 --> 00:00:51.000
Subsets are defined in Destination Rules.

9
00:00:52.000 --> 00:00:58.000
So, we create a Destination Rule with the kind SetToDestinationRule,

10
00:00:59.000 --> 00:01:06.000
name SetToReviews-Destination and host SetToReviews.

11
00:01:08.000 --> 00:01:16.000
We then define two subsets, V1 and V2, and provide labels under it.

12
00:01:17.000 --> 00:01:22.000
We set the version to V1 and V2, respectively.

13
00:01:23.000 --> 00:01:29.000
These are the labels set on the Pods for the respective version of Reviews deployment.

14
00:01:30.000 --> 00:01:34.000
This is how we define a separate subset of services,

15
00:01:35.000 --> 00:01:40.000
so that we can control the amount of traffic going to each subset.

16
00:01:41.000 --> 00:01:47.000
By default, Envoy load balances traffic in a round-robin fashion.

17
00:01:48.000 --> 00:01:57.000
This can be customized through the destination rule by specifying a traffic policy of load balancer.

18
00:01:58.000 --> 00:02:03.000
Set the traffic policy to a simple pass-through policy.

19
00:02:04.000 --> 00:02:10.000
This will route traffic to the host that has fewer active requests.

20
00:02:11.000 --> 00:02:18.000
There are other simple algorithms such as round-robin, random and pass-through.

21
00:02:20.000 --> 00:02:26.000
What if we want to override a different load balancing policy for specific subsets?

22
00:02:27.000 --> 00:02:34.000
For example, for subset V2, we would like to have a random load balancing policy.

23
00:02:35.000 --> 00:02:41.000
For this, we can specify a traffic policy at the subset level like this

24
00:02:42.000 --> 00:02:45.000
and configure a different policy.

25
00:02:46.000 --> 00:02:51.000
This way, we can configure one load balancing policy for all subsets

26
00:02:51.000 --> 00:02:56.000
and a separate one for selected subsets as required.

27
00:02:57.000 --> 00:03:02.000
There are many more configurations supported by Destination Rules.

28
00:03:03.000 --> 00:03:09.000
For example, to configure a client to use TLS, specify simple TLS.

29
00:03:10.000 --> 00:03:19.000
Or to configure mutual TLS, set the mode to mutual and provide the path to the certificate files.

30
00:03:20.000 --> 00:03:24.000
One important thing to note is the host field here.

31
00:03:25.000 --> 00:03:29.000
It is currently set to reviews, which is the name of the service.

32
00:03:30.000 --> 00:03:33.000
It is the short name of the service.

33
00:03:34.000 --> 00:03:39.000
When using short names instead of fully qualified domain names,

34
00:03:39.000 --> 00:03:47.000
Istio will interpret the short name based on the rule's namespace and not the service's actual namespace.

35
00:03:47.000 --> 00:03:53.000
This might lead to misconfigurations if your service is in another namespace.

36
00:03:54.000 --> 00:04:01.000
To avoid this, using fully qualified names over short names is recommended.

37
00:04:03.000 --> 00:04:05.000
Well, that's all for now.

38
00:04:06.000 --> 00:04:11.000
Next, we will see these in action in the demo videos that follow.
