WEBVTT

1
00:00:01.000 --> 00:00:04.000
So, what is a service mesh?

2
00:00:04.000 --> 00:00:08.000
This is where we were in the previous video.

3
00:00:08.000 --> 00:00:14.000
Instead of embedding all the different requirements into each microservice,

4
00:00:14.000 --> 00:00:22.000
we replace them with a single proxy in the form of a sidecar container.

5
00:00:22.000 --> 00:00:29.000
The proxies communicate with each other through what is known as a data plane.

6
00:00:29.000 --> 00:00:35.000
And they communicate to a server-side component called Control Plane.

7
00:00:35.000 --> 00:00:43.000
Control Plane manages all the traffic into and out of your services via proxies.

8
00:00:43.000 --> 00:00:49.000
So, all the networking logic is abstracted from your business code.

9
00:00:49.000 --> 00:00:55.000
And this approach is known as a service mesh.

10
00:00:55.000 --> 00:01:01.000
A service mesh is a dedicated and configurable infrastructure layer

11
00:01:01.000 --> 00:01:05.000
that handles the communication between services

12
00:01:05.000 --> 00:01:10.000
without having to change the code in a microservices architecture.

13
00:01:10.000 --> 00:01:18.000
With a service mesh, you can dynamically configure how services talk to each other.

14
00:01:18.000 --> 00:01:23.000
When services talk to one another, you'll have mutual TLS,

15
00:01:23.000 --> 00:01:27.000
so your workloads can be secure.

16
00:01:27.000 --> 00:01:30.000
You can see things better.

17
00:01:30.000 --> 00:01:34.000
For example, how the application is doing end-to-end,

18
00:01:34.000 --> 00:01:39.000
where it is having issues and bottlenecks.

19
00:01:39.000 --> 00:01:45.000
And service discovery, which covers three main topics.

20
00:01:45.000 --> 00:01:51.000
In a dynamic cluster, we will need to know at which IP and port

21
00:01:51.000 --> 00:01:56.000
services are exposed so they can find each other.

22
00:01:56.000 --> 00:02:02.000
Health Check helps you dynamically keep services that are up in the mesh

23
00:02:02.000 --> 00:02:07.000
while services that are down are left out.

24
00:02:07.000 --> 00:02:11.000
Load balancing routes the traffic to healthy instances

25
00:02:11.000 --> 00:02:16.000
and cuts it off from the ones that have been failing.

26
00:02:16.000 --> 00:02:23.000
We will look into each of these in more detail throughout the rest of this course.

27
00:02:23.000 --> 00:02:26.000
I'll see you in the next one.
