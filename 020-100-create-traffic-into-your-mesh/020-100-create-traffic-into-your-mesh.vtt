WEBVTT

1
00:00:01.000 --> 00:00:07.000
To see some real action in Kiali, our application needs to accept some traffic first.

2
00:00:08.000 --> 00:00:09.000
Let's do this together now.

3
00:00:10.000 --> 00:00:13.000
Let's create a Gateway for our application.

4
00:00:14.000 --> 00:00:19.000
We will cover this topic in our next chapter, and all you need to know right now is that

5
00:00:19.000 --> 00:00:24.000
Gateway will configure our Service Mesh to accept traffic from outside the cluster.

6
00:00:24.000 --> 00:00:33.000
In order to do this, we'll use the bookinfo-gateway.yaml in the networking directory.

7
00:00:35.000 --> 00:00:41.000
There's also a Virtual Service in the sample file, and we will talk about Virtual Services

8
00:00:41.000 --> 00:00:43.000
in our Traffic Management chapter.

9
00:00:44.000 --> 00:00:47.000
Let's check if everything's alright with our mesh.

10
00:00:50.000 --> 00:00:52.000
There are no validation issues.

11
00:00:53.000 --> 00:00:58.000
Let's find out at which IP our local cluster is reachable.

12
00:01:01.000 --> 00:01:06.000
Now, we will export this IP to a variable to use it more efficiently.

13
00:01:08.000 --> 00:01:13.000
Depending on your local cluster, you may export this IP with a command like this.

14
00:01:14.000 --> 00:01:15.000
Let's check it.

15
00:01:19.000 --> 00:01:20.000
Yes, it's set.

16
00:01:21.000 --> 00:01:27.000
Let's also get the proper port numbers, with this command from istio-ingress-gateway service.

17
00:01:28.000 --> 00:01:31.000
Let's check if the port is also set.

18
00:01:35.000 --> 00:01:40.000
Now, we can curl the product page using this address from our terminal.

19
00:01:42.000 --> 00:01:43.000
As you can see, it works.

20
00:01:43.000 --> 00:01:47.000
The whole HTML code of the product page is printed out.

21
00:01:51.000 --> 00:01:55.000
We can now also try to reach the Bookinfo app from our browser.

22
00:01:56.000 --> 00:02:01.000
To do that, we can get the URL easily by removing the curl from this command.

23
00:02:02.000 --> 00:02:04.000
Here, let's try this.

24
00:02:04.000 --> 00:02:05.000
Let's try this.

25
00:02:17.000 --> 00:02:20.000
Yes, our app is up and running.

26
00:02:22.000 --> 00:02:26.000
And every time we refresh it, the color of the stars is changing,

27
00:02:26.000 --> 00:02:32.000
so it also shows that our app uses three different versions of Reviews right now.

28
00:02:35.000 --> 00:02:39.000
Now, let's create some more traffic into our service mesh,

29
00:02:39.000 --> 00:02:42.000
because it will be much easier to experiment with it

30
00:02:42.000 --> 00:02:48.000
when we don't need to make requests to our app one by one through curl or from the browser.

31
00:02:49.000 --> 00:02:55.000
For this, I use this very simple command that creates a loop of cURL to the product page.

32
00:02:56.000 --> 00:03:00.000
And I did not get the output of the cURL printed on the terminal,

33
00:03:00.000 --> 00:03:02.000
which might look very crowded.

34
00:03:04.000 --> 00:03:08.000
And please take care of the backslashes in this command.

35
00:03:08.000 --> 00:03:11.000
Sometimes while copying, it could get messy.

36
00:03:20.000 --> 00:03:26.000
Now, let's go to the Kiali dashboard to see if we'll have any real action.

37
00:03:26.000 --> 00:03:32.000
It usually takes some time for Kiali to gather all the data and visualize it,

38
00:03:32.000 --> 00:03:38.000
so it might be helpful to change the time interval and refresh the graph a few times.

39
00:03:39.000 --> 00:03:42.000
As you can see, it is coming all together.

40
00:03:42.000 --> 00:03:47.000
Yes, it now looks exactly like we've been expecting it to look so far.

41
00:03:48.000 --> 00:03:54.000
And from the menu, we can see the applications are all healthy,

42
00:03:54.000 --> 00:03:56.000
we're all happy with the results,

43
00:03:56.000 --> 00:04:00.000
and we can see that we have a lot of traffic coming in.

44
00:04:01.000 --> 00:04:06.000
Let's go back to the Kiali dashboard to see if we'll have any real action.

45
00:04:06.000 --> 00:04:11.000
And from the menu, we can see the applications are all healthy,

46
00:04:11.000 --> 00:04:14.000
workloads and services as well.

47
00:04:15.000 --> 00:04:20.000
Let's check what we've added as Istio config with the bookinfo-gateway.yaml.

48
00:04:22.000 --> 00:04:26.000
Here is the bookinfo-gateway and bookinfo-virtual-service.

49
00:04:28.000 --> 00:04:31.000
These are the only Istio configurations we've done so far.

50
00:04:32.000 --> 00:04:35.000
In the next chapter, we'll cover both of these in detail.

51
00:04:37.000 --> 00:04:42.000
Kiali is very helpful in identifying problems in service meshes.

52
00:04:43.000 --> 00:04:45.000
To create some actual problems,

53
00:04:45.000 --> 00:04:49.000
let's delete one of our deployments to see what will happen.

54
00:04:59.000 --> 00:05:02.000
Okay, that's a very nasty thing to do.

55
00:05:02.000 --> 00:05:04.000
That's a very nasty thing to do.

56
00:05:06.000 --> 00:05:08.000
Now, moving to Kiali dashboard,

57
00:05:08.000 --> 00:05:12.000
let's wait to see the impact of our change here in the graph.

58
00:05:13.000 --> 00:05:18.000
Yeah, in the graph, we can see the product page going into a half-unavailable,

59
00:05:18.000 --> 00:05:20.000
half-available state,

60
00:05:20.000 --> 00:05:26.000
which is because the last one-minute interval still holds the data from the time

61
00:05:26.000 --> 00:05:31.000
the product page was working and then it is marked totally in dark red,

62
00:05:31.000 --> 00:05:35.000
which can also be seen at the bar on the right,

63
00:05:35.000 --> 00:05:41.000
because now all of the requests are getting 500 errors.

64
00:05:42.000 --> 00:05:47.000
And in the applications menu, product page has no health information,

65
00:05:47.000 --> 00:05:50.000
and since we deleted the deployment,

66
00:05:50.000 --> 00:05:53.000
it has totally disappeared from the workloads.

67
00:05:54.000 --> 00:05:56.000
Once the product page is gone,

68
00:05:56.000 --> 00:06:00.000
none of the services are receiving traffic from our cURL loop.

69
00:06:01.000 --> 00:06:07.000
This can also be seen in the services page with question marks in the health column.

70
00:06:08.000 --> 00:06:12.000
We don't have any information about the health of those services anymore.
